{"version":3,"sources":["App.js","index.js"],"names":["client","tmi","Client","channels","App","useState","votes","setVotes","status","setStatus","useEffect","onMessage","channel","tags","message","self","console","log","startsWith","split","ghost","trim","toLowerCase","filter","vote","user","concat","connect","catch","error","on","off","className","map","matches","length","match","join","rootElement","document","getElementById","createRoot","render"],"mappings":"uMAKMA,EAAS,IAAIC,IAAIC,OAAO,CAC5BC,SAAU,CAAC,cAGE,SAASC,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,WAArC,mBAAOG,EAAP,KAAeC,EAAf,KA0CA,OAxCAC,qBAAU,WAGR,SAASC,EAAUC,EAASC,EAAMC,EAASC,GAGzC,GAFAC,QAAQC,IAAIF,EAAMD,EAASN,GAEF,aAArBK,EAAI,UAaR,GAAe,YAAXL,GAEAM,EAAQI,WAAW,SAAU,CAC/B,MAAgBJ,EAAQK,MAAM,UAAvBC,EAAP,oBACAA,EAAQA,EAAMC,OAAOC,cAErBf,GAAS,SAACD,GAAD,OACPA,EACGiB,QAAO,SAACC,GAAD,OAAUA,EAAKC,OAASZ,EAAK,eAA7B,IACPa,OAAO,CAAED,KAAMZ,EAAK,gBAAiBW,KAAMJ,GAHvC,GAKV,MAvBiB,WAAZN,EACFL,EAAU,WACW,UAAZK,EACTL,EAAU,WACW,WAAZK,IACTL,EAAU,WACVF,EAAS,IAkBd,CAID,OAlCAP,EAAO2B,UAAUC,MAAMZ,QAAQa,OAgC/B7B,EAAO8B,GAAG,UAAWnB,GAEd,WACLX,EAAO+B,IAAI,UAAWpB,EACvB,CACF,GAAE,CAACH,IAGF,qBAAKwB,UAAU,MAAf,SACG,CAAC,SAAU,SAAU,UAAW,cAAe,UAAW,QAAQC,KACjE,SAACb,GACC,IAAMc,EAAU5B,EAAMiB,QAAO,SAACC,GAAD,OAAUA,EAAKA,OAASJ,CAAxB,IAE7B,OACE,gCACE,sBAAKY,UAAU,QAAf,UACGZ,EADH,IACWc,EAAQC,OAAS,GAAjB,YAA2BD,EAAQC,OAAnC,QAEX,qBAAKH,UAAU,QAAf,SACGE,EAAQD,KAAI,SAACG,GAAD,OAAWA,EAAMX,IAAjB,IAAuBY,KAAK,UALnCjB,EASb,KAIR,CCrED,IAAMkB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OAAO,cAACtC,EAAD,I","file":"static/js/main.dc20f23d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport tmi from \"tmi.js\";\n\nimport \"./styles.css\";\n\nconst client = new tmi.Client({\n  channels: [\"ivansttv\"]\n});\n\nexport default function App() {\n  const [votes, setVotes] = useState([]);\n  const [status, setStatus] = useState(\"stopped\");\n\n  useEffect(() => {\n    client.connect().catch(console.error);\n\n    function onMessage(channel, tags, message, self) {\n      console.log(self, message, status);\n\n      if (tags[\"username\"] === \"ivansttv\") {\n        if (message === \"!start\") {\n          setStatus(\"playing\");\n        } else if (message === \"!stop\") {\n          setStatus(\"stopped\");\n        } else if (message === \"!reset\") {\n          setStatus(\"stopped\");\n          setVotes([]);\n        }\n\n        return;\n      }\n\n      if (status !== \"playing\") return;\n\n      if (message.startsWith(\"!vote\")) {\n        let [, ghost] = message.split(\"!vote \");\n        ghost = ghost.trim().toLowerCase();\n\n        setVotes((votes) =>\n          votes\n            .filter((vote) => vote.user !== tags[\"display-name\"])\n            .concat({ user: tags[\"display-name\"], vote: ghost })\n        );\n      }\n    }\n\n    client.on(\"message\", onMessage);\n\n    return () => {\n      client.off(\"message\", onMessage);\n    };\n  }, [status]);\n\n  return (\n    <div className=\"App\">\n      {[\"spirit\", \"wraith\", \"phantom\", \"poltergeist\", \"banshee\", \"jinn\"].map(\n        (ghost) => {\n          const matches = votes.filter((vote) => vote.vote === ghost);\n\n          return (\n            <div key={ghost}>\n              <div className=\"ghost\">\n                {ghost} {matches.length > 0 && `(x${matches.length})`}\n              </div>\n              <div className=\"votes\">\n                {matches.map((match) => match.user).join(\", \")}\n              </div>\n            </div>\n          );\n        }\n      )}\n    </div>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}